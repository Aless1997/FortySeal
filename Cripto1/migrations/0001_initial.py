<<<<<<< HEAD
# Generated by Django 5.2.3 on 2025-08-19 17:21
=======
# Generated by Django 5.2.3 on 2025-08-18 20:00
>>>>>>> 5e0fffe8df18410efcf40eedb9fa5578262b3959

import django.core.validators
import django.db.models.deletion
import encrypted_model_fields.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Block',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('index', models.IntegerField(unique=True)),
                ('timestamp', models.FloatField()),
                ('proof', models.CharField(max_length=255)),
                ('previous_hash', models.CharField(max_length=255)),
                ('hash', models.CharField(max_length=255)),
                ('nonce', models.CharField(max_length=255)),
                ('merkle_root', models.CharField(max_length=255)),
                ('difficulty', models.FloatField(blank=True, default=4.0, null=True)),
            ],
            options={
                'ordering': ['index'],
            },
        ),
        migrations.CreateModel(
            name='BlockchainState',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_supply', models.FloatField(default=0.0)),
                ('max_supply', models.FloatField(default=21000000.0)),
                ('current_reward', models.FloatField(default=0.05)),
                ('halving_count', models.IntegerField(default=0)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('difficulty', models.FloatField(default=4.0)),
            ],
            options={
                'verbose_name': 'Blockchain State',
                'verbose_name_plural': 'Blockchain States',
            },
        ),
        migrations.CreateModel(
            name='Permission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('codename', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField()),
                ('category', models.CharField(choices=[('USER_MANAGEMENT', 'Gestione Utenti'), ('TRANSACTION_MANAGEMENT', 'Gestione Transazioni'), ('BLOCKCHAIN_MANAGEMENT', 'Gestione Blockchain'), ('SYSTEM_ADMIN', 'Amministrazione Sistema'), ('AUDIT_LOGS', 'Log di Audit'), ('SECURITY', 'Sicurezza'), ('REPORTS', 'Report e Analytics')], max_length=50)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Permesso',
                'verbose_name_plural': 'Permessi',
                'ordering': ['category', 'name'],
            },
        ),
        migrations.CreateModel(
            name='PersonalDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('file', models.FileField(upload_to='personal_documents/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'csv', 'xlsx', 'xls', 'doc', 'docx', 'txt'])])),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('is_encrypted', models.BooleanField(default=False)),
                ('original_filename', models.CharField(blank=True, max_length=255, null=True)),
                ('encrypted_symmetric_key', models.BinaryField(blank=True, null=True)),
                ('is_shareable', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='personal_documents', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField()),
                ('is_active', models.BooleanField(default=True)),
                ('is_system_role', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('permissions', models.ManyToManyField(blank=True, to='Cripto1.permission')),
            ],
            options={
                'verbose_name': 'Ruolo',
                'verbose_name_plural': 'Ruoli',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('text', 'Text Message'), ('file', 'File Upload')], max_length=50)),
                ('sender_public_key', models.TextField(blank=True, null=True)),
                ('content', models.TextField(blank=True)),
                ('file', models.FileField(blank=True, null=True, upload_to='transaction_files/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'csv', 'xlsx', 'xls', 'doc', 'docx', 'txt'])])),
                ('timestamp', models.FloatField()),
                ('transaction_hash', models.CharField(max_length=255, unique=True)),
                ('signature', models.TextField(blank=True, null=True)),
                ('is_encrypted', models.BooleanField(default=False)),
                ('is_shareable', models.BooleanField(default=False)),
                ('original_filename', models.CharField(blank=True, max_length=255, null=True)),
                ('encrypted_symmetric_key', models.BinaryField(blank=True, null=True)),
                ('receiver_public_key_at_encryption', models.TextField(blank=True, null=True)),
                ('max_downloads', models.IntegerField(blank=True, default=None, null=True)),
                ('current_downloads', models.IntegerField(default=0)),
                ('is_viewed', models.BooleanField(default=False)),
                ('sender_encrypted_content', models.TextField(blank=True, null=True)),
                ('sender_encrypted_symmetric_key', models.BinaryField(blank=True, null=True)),
                ('block', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to='Cripto1.block')),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_transactions', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_transactions', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_key', models.CharField(max_length=255, unique=True)),
                ('public_key', models.TextField(blank=True, null=True)),
                ('private_key', encrypted_model_fields.fields.EncryptedTextField(blank=True, null=True)),
                ('balance', models.FloatField(default=0.0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pics/')),
                ('is_active', models.BooleanField(default=True)),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('last_login_date', models.DateTimeField(blank=True, null=True)),
                ('login_attempts', models.IntegerField(default=0)),
                ('locked_until', models.DateTimeField(blank=True, null=True)),
                ('sso_provider', models.CharField(blank=True, max_length=50, null=True)),
                ('sso_id', models.CharField(blank=True, max_length=255, null=True)),
                ('department', models.CharField(blank=True, max_length=100, null=True)),
                ('position', models.CharField(blank=True, max_length=100, null=True)),
                ('phone', models.CharField(blank=True, max_length=20, null=True)),
                ('emergency_contact', models.CharField(blank=True, max_length=255, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('two_factor_enabled', models.BooleanField(default=False)),
                ('two_factor_secret', encrypted_model_fields.fields.EncryptedTextField(blank=True, null=True)),
                ('two_factor_verified', models.BooleanField(default=False)),
                ('storage_quota_bytes', models.BigIntegerField(default=5368709120)),
                ('storage_used_bytes', models.BigIntegerField(default=0)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SmartContract',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('code', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('block', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='Cripto1.block')),
                ('deployer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Cripto1.userprofile')),
            ],
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_type', models.CharField(choices=[('LOGIN', 'Login'), ('LOGOUT', 'Logout'), ('REGISTER', 'Registrazione'), ('CREATE_TRANSACTION', 'Creazione Transazione'), ('VIEW_TRANSACTION', 'Visualizzazione Transazione'), ('DOWNLOAD_FILE', 'Download File'), ('DECRYPT_MESSAGE', 'Decifratura Messaggio'), ('MINE_BLOCK', 'Mining Blocco'), ('EDIT_PROFILE', 'Modifica Profilo'), ('ADMIN_ACTION', 'Azione Amministrativa'), ('SECURITY_EVENT', 'Evento di Sicurezza'), ('EXPORT_DATA', 'Export Dati'), ('VERIFY_BLOCKCHAIN', 'Verifica Blockchain'), ('USER_MANAGEMENT', 'Gestione Utenti'), ('SYSTEM_EVENT', 'Evento di Sistema'), ('ROLE_ASSIGNMENT', 'Assegnazione Ruolo'), ('PERMISSION_CHANGE', 'Modifica Permessi'), ('USER_ACTIVATION', 'Attivazione Utente'), ('USER_DEACTIVATION', 'Disattivazione Utente'), ('SSO_LOGIN', 'Login SSO')], max_length=50)),
                ('severity', models.CharField(choices=[('LOW', 'Basso'), ('MEDIUM', 'Medio'), ('HIGH', 'Alto'), ('CRITICAL', 'Critico')], default='MEDIUM', max_length=20)),
                ('description', models.TextField()),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('session_id', models.CharField(blank=True, max_length=255)),
                ('related_object_type', models.CharField(blank=True, max_length=100)),
                ('related_object_id', models.IntegerField(blank=True, null=True)),
                ('additional_data', models.JSONField(blank=True, default=dict)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('success', models.BooleanField(default=True)),
                ('error_message', models.TextField(blank=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='audit_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Audit Log',
                'verbose_name_plural': 'Audit Logs',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['user', 'action_type', 'timestamp'], name='Cripto1_aud_user_id_531a62_idx'), models.Index(fields=['action_type', 'severity', 'timestamp'], name='Cripto1_aud_action__cb5959_idx'), models.Index(fields=['ip_address', 'timestamp'], name='Cripto1_aud_ip_addr_f6f36a_idx')],
            },
        ),
        migrations.CreateModel(
            name='UserRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assigned_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('notes', models.TextField(blank=True)),
                ('assigned_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='role_assignments_made', to=settings.AUTH_USER_MODEL)),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_assignments', to='Cripto1.role')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_roles', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Ruolo Utente',
                'verbose_name_plural': 'Ruoli Utente',
                'ordering': ['-assigned_at'],
                'unique_together': {('user', 'role')},
            },
        ),
    ]
